/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2022-01-15 15:37:25.223634
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[0]);
x10=((0.076)*x0);
x11=((0.3425)*x9);
x12=((0.097)*x0);
x13=((1.0)*x0);
x14=((0.076)*x9);
x15=((0.097)*x9);
x16=((1.0)*x7);
x17=((0.2845)*x3);
x18=((0.0535)*x1);
x19=((0.0775)*x9);
x20=((0.3425)*x0);
x21=((1.0)*x9);
x22=((1.0)*x6);
x23=((0.0775)*x0);
x24=(x2*x3);
x25=(x1*x2);
x26=(x3*x4);
x27=(x1*x4);
x28=(x13*x26);
x29=(x21*x26);
x30=((((-1.0)*x25))+x26);
x31=((((-1.0)*x27))+(((-1.0)*x24)));
x32=((((1.0)*x24))+(((1.0)*x27)));
x33=(((x0*x25))+(((-1.0)*x28)));
x34=((((-1.0)*x29))+((x25*x9)));
x35=(x31*x6);
x36=(x13*(((((-1.0)*x27))+(((-1.0)*x24)))));
x37=(x21*(((((-1.0)*x27))+(((-1.0)*x24)))));
x38=(x33*x6);
x39=(x34*x6);
eerot[0]=(((x5*x9))+((x8*((x38+((x36*x7)))))));
eerot[1]=(((x8*x9))+((x5*(((((-1.0)*x22*x33))+(((-1.0)*x16*x36)))))));
eerot[2]=(((x7*(((((-1.0)*x13*x25))+x28))))+((x36*x6)));
IkReal x40=((1.0)*x20);
IkReal x41=((1.0)*x26);
IkReal x42=((1.0)*x24);
IkReal x43=((1.0)*x27);
eetrans[0]=(((x0*x18))+((x0*x17))+(((-1.0)*x23*x41))+((x6*(((((-1.0)*x10*x41))+((x10*x25))))))+((x6*(((((-1.0)*x12*x42))+(((-1.0)*x12*x43))))))+((x7*(((((-1.0)*x10*x43))+(((-1.0)*x10*x42))))))+(((-1.0)*x27*x40))+((x23*x25))+((x7*(((((-1.0)*x12*x25))+((x12*x26))))))+(((-1.0)*x24*x40)));
eerot[3]=(((x8*((x39+((x37*x7))))))+(((-1.0)*x13*x5)));
eerot[4]=(((x5*(((((-1.0)*x22*x34))+(((-1.0)*x16*x37))))))+(((-1.0)*x13*x8)));
eerot[5]=(((x7*(((((-1.0)*x21*x25))+x29))))+((x37*x6)));
IkReal x44=((1.0)*x15);
IkReal x45=((1.0)*x11);
IkReal x46=((1.0)*x26);
IkReal x47=((1.0)*x14);
eetrans[1]=(((x18*x9))+((x19*x25))+(((-1.0)*x27*x45))+((x6*((((x14*x25))+(((-1.0)*x14*x46))))))+((x7*(((((-1.0)*x25*x44))+((x15*x26))))))+((x17*x9))+(((-1.0)*x24*x45))+(((-1.0)*x19*x46))+((x6*(((((-1.0)*x27*x44))+(((-1.0)*x24*x44))))))+((x7*(((((-1.0)*x27*x47))+(((-1.0)*x24*x47)))))));
eerot[6]=(x8*((((x30*x7))+x35)));
eerot[7]=(x5*(((((-1.0)*x22*x31))+(((-1.0)*x16*x30)))));
eerot[8]=(((x32*x7))+((x30*x6)));
eetrans[2]=((0.267)+(((-0.0535)*x3))+((x7*(((((-0.076)*x25))+(((0.076)*x26))))))+((x6*(((((-0.076)*x24))+(((-0.076)*x27))))))+(((0.3425)*x26))+(((0.2845)*x1))+(((-0.0775)*x27))+(((-0.0775)*x24))+((x7*(((((0.097)*x27))+(((0.097)*x24))))))+((x6*(((((-0.097)*x25))+(((0.097)*x26))))))+(((-0.3425)*x25)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.097)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.097)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.267)+(((-0.097)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x48=((1.0)*px);
IkReal x49=((1.0)*pz);
IkReal x50=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x50))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x49)));
rxp0_2=((((-1.0)*r10*x48))+((py*r00)));
rxp1_0=((((-1.0)*r21*x50))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x49)));
rxp1_2=((((-1.0)*r11*x48))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x50)));
rxp2_1=((((-1.0)*r02*x49))+((px*r22)));
rxp2_2=((((-1.0)*r12*x48))+((py*r02)));
{
IkReal j4eval[1];
j4eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2, j3, j4]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x52 = IKatan2WithCheck(IkReal(((-1.0)*npy)),IkReal(((-1.0)*npx)),IKFAST_ATAN2_MAGTHRESH);
if(!x52.valid){
continue;
}
IkReal x51=x52.value;
j4array[0]=((-1.0)*x51);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x51)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((0.990297933820629)+(((0.747621106396355)*cj4*npx))+(((-4.91855991050233)*pp))+(((-0.747621106396355)*npy*sj4)))) < -1-IKFAST_SINCOS_THRESH || (((0.990297933820629)+(((0.747621106396355)*cj4*npx))+(((-4.91855991050233)*pp))+(((-0.747621106396355)*npy*sj4)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x53=IKasin(((0.990297933820629)+(((0.747621106396355)*cj4*npx))+(((-4.91855991050233)*pp))+(((-0.747621106396355)*npy*sj4))));
j2array[0]=((-1.16238794232085)+(((1.0)*x53)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.97920471126894)+(((-1.0)*x53)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j3eval[3];
IkReal x54=cj2*cj2;
IkReal x55=(cj4*npx);
IkReal x56=((69.9704869650762)*cj2);
IkReal x57=((13.1578947368421)*sj2);
IkReal x58=(npy*sj4);
IkReal x59=(npz*sj2);
IkReal x60=(cj2*sj2);
IkReal x61=((0.2845)*cj2);
IkReal x62=(cj2*npz);
IkReal x63=((0.0535)*sj2);
j3eval[0]=((6.4018691588785)+(((-1.0)*x56*x58))+(((-1.0)*sj2))+(((-5.31775700934579)*cj2))+(((-13.1578947368421)*x62))+(((84.2351205115593)*x58))+(((69.9704869650762)*x59))+(((-19.0605017215937)*npz))+(((-1.0)*x57*x58))+(((-84.2351205115593)*x55))+((x55*x56))+((x55*x57)));
j3eval[1]=IKsign(((0.02603)+(((-0.004066)*sj2))+(((0.2845)*x59))+(((-0.0775)*npz))+(((-0.021622)*cj2))+(((-0.0535)*x62))+(((-0.3425)*x55))+(((-1.0)*x58*x63))+(((-1.0)*x58*x61))+(((0.3425)*x58))+((x55*x63))+((x55*x61))));
j3eval[2]=((IKabs(((-0.0417645)+(((0.0304415)*x54))+(((0.003725)*cj2))+((npz*x58))+(((-1.0)*npz*x55))+(((0.1015875)*sj2))+(((-0.078078)*x60))+(((0.076)*npz)))))+(IKabs(((-0.1201685)+(((0.0366475)*sj2))+(((0.1948825)*cj2))+(((-0.0304415)*x60))+(npz*npz)+(((-0.078078)*x54))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x64=cj2*cj2;
IkReal x65=(npy*sj4);
IkReal x66=(cj2*sj2);
IkReal x67=(cj2*npz);
IkReal x68=(cj4*npx);
IkReal x69=((0.2845)*sj2);
IkReal x70=(npz*sj2);
IkReal x71=((69.9704869650762)*sj2);
IkReal x72=(cj2*x65);
j3eval[0]=((-1.44859813084112)+(((5.31775700934579)*sj2))+(((19.0605017215937)*x68))+(((-19.0605017215937)*x65))+(((69.9704869650762)*x67))+(((-13.1578947368421)*x72))+(((-84.2351205115593)*npz))+(((-1.0)*x68*x71))+(((13.1578947368421)*cj2*x68))+((x65*x71))+(((-1.0)*cj2))+(((13.1578947368421)*x70)));
j3eval[1]=IKsign(((-0.00589)+(((0.2845)*x67))+(((-0.004066)*cj2))+(((0.0775)*x68))+(((0.0535)*cj2*x68))+(((0.021622)*sj2))+(((-0.0775)*x65))+(((0.0535)*x70))+(((-0.3425)*npz))+(((-1.0)*x68*x69))+(((-0.0535)*x72))+((x65*x69))));
j3eval[2]=((IKabs(((0.0417645)+(((-0.003725)*cj2))+(((-0.1015875)*sj2))+((npz*x65))+(((-1.0)*npz*x68))+(((0.078078)*x66))+(((-0.0304415)*x64))+(((0.076)*npz)))))+(IKabs(((0.0869465)+(((-1.0)*(npz*npz)))+(((-0.0304415)*x66))+(((0.0082925)*cj2))+(((-0.078078)*x64))+(((-0.0440975)*sj2))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x73=(cj4*npx);
IkReal x74=((69.9704869650762)*cj2);
IkReal x75=((13.1578947368421)*sj2);
IkReal x76=(npz*sj2);
IkReal x77=(npy*sj4);
IkReal x78=((0.2845)*cj2);
IkReal x79=(cj2*npz);
IkReal x80=((0.0535)*sj2);
j3eval[0]=((6.4018691588785)+(((-1.0)*sj2))+(((-5.31775700934579)*cj2))+(((-1.0)*x74*x77))+(((-13.1578947368421)*x79))+(((-19.0605017215937)*npz))+(((-84.2351205115593)*x73))+(((84.2351205115593)*x77))+((x73*x75))+((x73*x74))+(((69.9704869650762)*x76))+(((-1.0)*x75*x77)));
j3eval[1]=IKsign(((0.02603)+(((-0.004066)*sj2))+(((0.2845)*x76))+(((-0.0775)*npz))+(((-0.021622)*cj2))+(((-1.0)*x77*x80))+((x73*x80))+(((0.3425)*x77))+(((-0.0535)*x79))+(((-0.3425)*x73))+((x73*x78))+(((-1.0)*x77*x78))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x81=cj4*cj4;
IkReal x82=npy*npy;
IkReal x83=cj2*cj2;
IkReal x84=(cj2*sj2);
IkReal x85=(cj4*npx);
IkReal x86=((0.2845)*cj2);
IkReal x87=(npy*sj4);
IkReal x88=((0.0535)*sj2);
CheckValue<IkReal> x89 = IKatan2WithCheck(IkReal(((0.0811705)+(((-0.0304415)*x84))+(((0.152)*x85))+(((2.0)*x85*x87))+((x81*x82))+(((-0.078078)*x83))+(((-1.0)*x81*(npx*npx)))+(((-1.0)*x82))+(((-0.152)*x87))+(((0.0082925)*cj2))+(((-0.0440975)*sj2)))),IkReal(((-0.0417645)+(((-1.0)*npz*x85))+(((0.003725)*cj2))+(((-0.078078)*x84))+((npz*x87))+(((0.1015875)*sj2))+(((0.0304415)*x83))+(((0.076)*npz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x89.valid){
continue;
}
CheckValue<IkReal> x90=IKPowWithIntegerCheck(IKsign(((0.02603)+(((-0.004066)*sj2))+(((-0.3425)*x85))+(((0.3425)*x87))+(((-0.0775)*npz))+(((-0.0535)*cj2*npz))+(((-0.021622)*cj2))+((x85*x88))+((x85*x86))+(((-1.0)*x86*x87))+(((-1.0)*x87*x88))+(((0.2845)*npz*sj2)))),-1);
if(!x90.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x89.value)+(((1.5707963267949)*(x90.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x91=IKcos(j3);
IkReal x92=IKsin(j3);
IkReal x93=((0.0535)*cj2);
IkReal x94=(npy*sj4);
IkReal x95=((1.0)*npz);
IkReal x96=(sj2*x91);
IkReal x97=(sj2*x92);
IkReal x98=(cj2*x92);
IkReal x99=((1.0)*cj4*npx);
IkReal x100=(cj2*x91);
evalcond[0]=((0.0775)+(((0.076)*x91))+(((-0.2845)*sj2))+(((-1.0)*x91*x99))+((npz*x92))+x93+((x91*x94)));
evalcond[1]=((0.3425)+(((0.076)*x92))+((x92*x94))+(((-0.0535)*sj2))+(((-1.0)*x91*x95))+(((-0.2845)*cj2))+(((-1.0)*x92*x99)));
evalcond[2]=((((0.3425)*x91))+(((0.2845)*x97))+(((-0.0535)*x96))+(((-0.2845)*x100))+(((-0.0775)*x92))+(((-1.0)*x92*x93))+(((-1.0)*x95)));
evalcond[3]=((0.076)+(((0.3425)*x92))+(((-0.0535)*x97))+(((-0.2845)*x98))+(((-0.2845)*x96))+x94+(((-1.0)*x99))+(((0.0775)*x91))+((x91*x93)));
evalcond[4]=((-0.212891)+(((0.008132)*x97))+(((-0.008132)*x100))+(((-0.01178)*x91))+(((0.080745)*sj2))+(((0.18659)*cj2))+pp+(((0.043244)*x96))+(((0.043244)*x98))+(((-0.05206)*x92)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x115=cj2*cj2;
IkReal x116=(npy*sj4);
IkReal x117=((0.0535)*cj2);
IkReal x118=(cj2*sj2);
IkReal x119=((0.2845)*sj2);
IkReal x120=(cj4*npx);
CheckValue<IkReal> x121=IKPowWithIntegerCheck(IKsign(((-0.00589)+(((-1.0)*x119*x120))+((x117*x120))+(((-0.004066)*cj2))+(((-1.0)*x116*x117))+(((-0.0775)*x116))+(((0.021622)*sj2))+(((-0.3425)*npz))+(((0.0775)*x120))+(((0.2845)*cj2*npz))+((x116*x119))+(((0.0535)*npz*sj2)))),-1);
if(!x121.valid){
continue;
}
CheckValue<IkReal> x122 = IKatan2WithCheck(IkReal(((0.0417645)+(((-0.003725)*cj2))+(((-0.1015875)*sj2))+(((0.078078)*x118))+(((-1.0)*npz*x120))+((npz*x116))+(((-0.0304415)*x115))+(((0.076)*npz)))),IkReal(((0.0869465)+(((-0.078078)*x115))+(((-1.0)*(npz*npz)))+(((0.0082925)*cj2))+(((-0.0304415)*x118))+(((-0.0440975)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x122.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x121.value)))+(x122.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x123=IKcos(j3);
IkReal x124=IKsin(j3);
IkReal x125=((0.0535)*cj2);
IkReal x126=(npy*sj4);
IkReal x127=((1.0)*npz);
IkReal x128=(sj2*x123);
IkReal x129=(sj2*x124);
IkReal x130=(cj2*x124);
IkReal x131=((1.0)*cj4*npx);
IkReal x132=(cj2*x123);
evalcond[0]=((0.0775)+(((-1.0)*x123*x131))+(((-0.2845)*sj2))+(((0.076)*x123))+x125+((x123*x126))+((npz*x124)));
evalcond[1]=((0.3425)+(((-1.0)*x123*x127))+(((0.076)*x124))+(((-0.0535)*sj2))+(((-0.2845)*cj2))+(((-1.0)*x124*x131))+((x124*x126)));
evalcond[2]=((((0.2845)*x129))+(((-0.2845)*x132))+(((-0.0535)*x128))+(((-0.0775)*x124))+(((0.3425)*x123))+(((-1.0)*x127))+(((-1.0)*x124*x125)));
evalcond[3]=((0.076)+(((-0.2845)*x128))+(((-0.2845)*x130))+(((-0.0535)*x129))+(((0.3425)*x124))+x126+(((-1.0)*x131))+((x123*x125))+(((0.0775)*x123)));
evalcond[4]=((-0.212891)+(((-0.008132)*x132))+(((0.008132)*x129))+(((0.080745)*sj2))+(((0.18659)*cj2))+pp+(((0.043244)*x128))+(((0.043244)*x130))+(((-0.05206)*x124))+(((-0.01178)*x123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x133=cj2*cj2;
IkReal x134=(npy*sj4);
IkReal x135=(cj2*sj2);
IkReal x136=(cj4*npx);
IkReal x137=((0.2845)*cj2);
IkReal x138=((0.0535)*sj2);
CheckValue<IkReal> x139 = IKatan2WithCheck(IkReal(((-0.1201685)+(((-0.078078)*x133))+(((0.0366475)*sj2))+(((0.1948825)*cj2))+(npz*npz)+(((-0.0304415)*x135)))),IkReal(((-0.0417645)+(((-0.078078)*x135))+(((0.0304415)*x133))+(((0.003725)*cj2))+(((-1.0)*npz*x136))+(((0.1015875)*sj2))+((npz*x134))+(((0.076)*npz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x139.valid){
continue;
}
CheckValue<IkReal> x140=IKPowWithIntegerCheck(IKsign(((0.02603)+(((-0.004066)*sj2))+(((-1.0)*x134*x138))+(((-1.0)*x134*x137))+(((-0.0775)*npz))+(((-0.0535)*cj2*npz))+(((-0.021622)*cj2))+(((0.3425)*x134))+((x136*x138))+((x136*x137))+(((0.2845)*npz*sj2))+(((-0.3425)*x136)))),-1);
if(!x140.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x139.value)+(((1.5707963267949)*(x140.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x141=IKcos(j3);
IkReal x142=IKsin(j3);
IkReal x143=((0.0535)*cj2);
IkReal x144=(npy*sj4);
IkReal x145=((1.0)*npz);
IkReal x146=(sj2*x141);
IkReal x147=(sj2*x142);
IkReal x148=(cj2*x142);
IkReal x149=((1.0)*cj4*npx);
IkReal x150=(cj2*x141);
evalcond[0]=((0.0775)+((npz*x142))+(((-0.2845)*sj2))+x143+((x141*x144))+(((-1.0)*x141*x149))+(((0.076)*x141)));
evalcond[1]=((0.3425)+((x142*x144))+(((-0.0535)*sj2))+(((-1.0)*x142*x149))+(((-0.2845)*cj2))+(((-1.0)*x141*x145))+(((0.076)*x142)));
evalcond[2]=((((-1.0)*x145))+(((-0.0535)*x146))+(((-0.0775)*x142))+(((-1.0)*x142*x143))+(((0.2845)*x147))+(((-0.2845)*x150))+(((0.3425)*x141)));
evalcond[3]=((0.076)+(((-1.0)*x149))+(((-0.0535)*x147))+x144+(((0.0775)*x141))+(((-0.2845)*x146))+(((-0.2845)*x148))+((x141*x143))+(((0.3425)*x142)));
evalcond[4]=((-0.212891)+(((0.080745)*sj2))+(((-0.01178)*x141))+(((0.18659)*cj2))+pp+(((-0.05206)*x142))+(((0.043244)*x148))+(((0.043244)*x146))+(((-0.008132)*x150))+(((0.008132)*x147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x101=((1.0)*sj3);
IkReal x102=((1.0)*sj2);
IkReal x103=((1.0)*sj4);
IkReal x104=((1.0)*cj4);
IkReal x105=((-1.0)*sj3);
IkReal x106=((((-1.0)*r01*x103))+((cj4*r00)));
IkReal x107=((((-1.0)*r11*x103))+((cj4*r10)));
IkReal x108=((((-1.0)*r21*x103))+((cj4*r20)));
IkReal x109=(cj3*x107);
IkReal x110=(((sj3*x106))+((cj3*r02)));
IkReal x111=(((cj3*x106))+(((-1.0)*r02*x101)));
IkReal x112=(((sj3*x107))+((cj3*r12)));
IkReal x113=(((sj3*x108))+((cj3*r22)));
IkReal x114=(((cj3*x108))+((r22*x105)));
new_r00=(((cj2*x111))+(((-1.0)*x102*x110)));
new_r01=(((cj2*x110))+((sj2*x111)));
new_r02=((((-1.0)*r01*x104))+(((-1.0)*r00*x103)));
new_r10=((((-1.0)*x102*x112))+((cj2*((x109+((r12*x105)))))));
new_r11=(((cj2*x112))+((sj2*(((((-1.0)*r12*x101))+x109)))));
new_r12=((((-1.0)*r11*x104))+(((-1.0)*r10*x103)));
new_r20=(((cj2*x114))+(((-1.0)*x102*x113)));
new_r21=(((cj2*x113))+((sj2*x114)));
new_r22=((((-1.0)*r21*x104))+(((-1.0)*r20*x103)));
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1.0)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02))+IKsqr(new_r12)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1.0)*new_r02), new_r12);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - xarm5 (20c304045bbf9e9e05a43adf4bc9c6a4)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
